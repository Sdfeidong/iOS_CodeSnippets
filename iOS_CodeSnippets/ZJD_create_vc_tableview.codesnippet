<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>create_vc_tableview</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// 替换 ViewController
#import "ViewController.h"

@interface ViewController ()&lt;UITableViewDelegate,UITableViewDataSource&gt; {
    
}
// tableView
@property(nonatomic, strong) UITableView *tableView;
// DataSource
@property(nonatomic, strong) NSMutableArray *dataSource;

@end

@implementation ViewController

- (void)viewDidLoad {
    
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    // 加载自定义导航
    [self layoutNav];
    // 其它view
    [self layoutOtherView];
    // ...
    
    // 初始化数据
    [self initData];
    // 添加通知
    [self addNotification];
}
#pragma mark - viewWillAppear
- (void)viewWillAppear:(BOOL)animated {
    
    [super viewWillAppear:animated];
}
#pragma mark - loadView
// 自定义导航
- (void)layoutNav {
    
    self.view.backgroundColor = [UIColor whiteColor];
    NSString *navTitle = @"导航";
    [self createNavWithTitle:navTitle createMenuItem:^UIView *(int nIndex) {
        
        if (nIndex == 0){
            
            UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];
            [btn setFrame:CGRectMake(0, (self.navView.height - KNaVButtonHeight)/2, kNavButtonWidth, KNaVButtonHeight)];
            UIImage *image = [UIImage imageNamed:@"返回白"];
            // [btn setTitle:@"返回" forState:UIControlStateNormal];
            [btn setImage:image forState:UIControlStateNormal];
            [btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            [btn addTarget:self action:@selector(backBtnAction) forControlEvents:UIControlEventTouchUpInside];
            return btn;
        }
        
        return nil;
    }];
    
    // 放在此处以免 block造成的异步。
    self.navIV.backgroundColor = [UIColor orangeColor];
    // 默认不透明
    self.navIV.alpha = 1;
}
// 其它view
- (void)layoutOtherView {
    
    // 初始化tableView
    self.tableView = [self layoutTableViewWithFrame:CGRectMake(0, kNavBarHeight, kMScreen_W, kMScreen_H - kNavBarHeight)];
    // _tableV.hidden = YES;
    self.tableView.backgroundColor = [UIColor whiteColor];
    [self.view addSubview:self.tableView];
    // 隐藏最后一个cell后的所有分割线
    [UITableView setExtraCellLineHidden:self.tableView];
    
    // ...其它
}

// tableView
- (UITableView *)layoutTableViewWithFrame:(CGRect)frame {
    
    UITableView *tableView;
    tableView = [[UITableView alloc] initWithFrame:frame style:UITableViewStylePlain];
    tableView.userInteractionEnabled = YES;
    tableView.delegate = self;
    tableView.dataSource = self;
    tableView.scrollEnabled = YES;
    return tableView;
}
#pragma mark - 初始化数据
- (void)initData {
    
    self.dataSource = [NSMutableArray new];
    
    //    __async_global__, ^
    //    {
    //        __async_main__, ^
    //        {
    //            [self.tableView reloadData];
    //
    //        });
    //    });
}
#pragma mark - 取消tableView分区的区头粘性（悬停效果）
// 可删除
// UITableView继承自UIScrollView,可以直接使用其代理方法
- (void)scrollViewDidScroll:(UIScrollView *)scrollView {
    
    // 如果tableview中有多个不同高度的section，建议不要用此方法
    // 实际 sectionHeader 的高度
    CGFloat sectionHeaderHeight = 10;
    
    if (scrollView.contentOffset.y &lt;= sectionHeaderHeight &amp;&amp; scrollView.contentOffset.y &gt;= 0) {
        
        scrollView.contentInset = UIEdgeInsetsMake(-scrollView.contentOffset.y, 0, 0, 0);
    }
    else if(scrollView.contentOffset.y &gt;= sectionHeaderHeight) {
        
        scrollView.contentInset = UIEdgeInsetsMake(-sectionHeaderHeight, 0, 0, 0);
    }
}

#pragma mark - TableViewDataSource
// 可删除 默认 1
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    // return [self.dataSource count];
    return 1;
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    // return [self.dataSourse[section] count];
    return [self.dataSource count];
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    static NSString *cellStr = @"cellStr";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellStr];
    if (!cell) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellStr];
    }
    
    for (UIView *v in cell.contentView.subviews) {
        [v removeFromSuperview];
    }
    
    // cell尾部样式
    cell.accessoryType = UITableViewCellAccessoryNone;
    // cell选中样式
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    
    return cell;
}
#pragma mark - UITableViewDelegate
// 可删除 默认 44
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    return 44;
}
// 可删除
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    
    return 10;
}
// 可删除
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    
    return [UIView new];
}
// 可删除
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{
    
    return 0;
}
// 可删除
- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section {
    
    // 去掉多余的线条
    return [UIView new];
}
// 可删除
- (NSIndexPath*)tableView:(UITableView *)tableView willSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    
    //
    return indexPath;
    // indexPath 设置不可选中
    // return nil
}
// 可删除
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    
    // 取消选中状态
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    // 获取当前选中的Cell
    UITableViewCell *cellCrurent = [self.tableView cellForRowAtIndexPath:indexPath];
    cellCrurent.accessoryType = UITableViewCellAccessoryCheckmark;
    cellCrurent.textLabel.textColor = [UIColor blueColor];
}
// 可删除
// 设置左滑删除样式
- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath {
    return UITableViewCellEditingStyleDelete;
}
// 可删除
// 点击删除后执行的方法
- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"点击了删除 %ld,%ld",(long)indexPath.section,(long)indexPath.row);
}
- (NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath {
    return @"删除";
}

#pragma mark - BtnAction

#pragma mark - Notification
- (void)addNotification {
    
    // [NNC_DC addObserver:self selector:@selector(&lt;#selector#&gt;) name:&lt;#(nullable NSNotificationName)#&gt; object:nil];
}
/**
 - (void)nameNoti:(NSNotification *)noti {
 
 NSDictionary *dictObject = [noti object];
 NSDictionary *dictInfo = [noti userInfo];
 }
 */
#pragma mark - Self
- (void)dealloc {
    
    // 移除self的所有通知
    [NNC_DC removeObserver:self];
    // ...
}
- (void)didReceiveMemoryWarning {
    
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
@end
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>B800C7EB-BA84-44AE-AA6E-DCF7CCE51409</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string>继承于BasicViewController 带UITableView</string>
	<key>IDECodeSnippetTitle</key>
	<string>create_vc_tableview</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
